{"version":3,"sources":["../src/index.ts","../../parser/src/parser.ts","../../parser/src/index.ts"],"sourcesContent":["import { parseTestSuite } from \"@currents/pwc-parser\";\nimport Debug from \"debug\";\n\nconst debug = Debug(\"pwc-scanner\");\n\nexport const pwcScanner = async (params: {\n  project?: string;\n  grep: string | null;\n  grepInvert: string | null;\n  config?: string;\n}) => {\n  // https://github.com/microsoft/TypeScript/issues/43329\n  // @ts-ignore\n  const { execa } = (await eval('import(\"execa\")')) as Promise<\n    typeof import(\"execa\")\n  >;\n\n  const cliParams = [\n    \"test\",\n    \"--list\",\n    ...Object.entries(params)\n      .filter(([_, value]) => value !== undefined)\n      .map(([key, value]) => `${toCliParam(key)}=${value}`),\n    \"--reporter=list\", // do not use any configuration reporters\n    \"--shard=1/1\", // override the option that was potentially set in the configuration file\n  ];\n\n  debug(\"running playwright with the following params: %o\", cliParams);\n\n  const execaResult = await execa(\"playwright\", cliParams, {\n    env: {\n      PWTEST_WATCH: undefined, // no don use if passed\n    },\n  });\n\n  debug(\"execa result: %o\", execaResult);\n\n  if (execaResult.failed) {\n    return { execaResult, result: null };\n  }\n\n  return { execaResult, result: parseTestSuite(execaResult.stdout) };\n};\n\nconst toCliParam = (param: string) => {\n  switch (param) {\n    case \"project\":\n      return \"--project\";\n    case \"grep\":\n      return \"--grep\";\n    case \"grepInvert\":\n      return \"--grep-invert\";\n    case \"config\":\n      return \"--config\";\n    default:\n      throw new Error(\"Invalid param\");\n  }\n};\n","export type TestSuite = {\n  [x: string]: Record<string, string[]>;\n};\n\nexport const parse = (inputString: string): TestSuite => {\n  const lines = inputString.split(\"\\n\");\n  const result: TestSuite = {};\n\n  for (const line of lines) {\n    const match = line.match(/\\[([^\\]]+)\\] › ([^:]+):(\\d+:\\d+) › (.+)/);\n    if (match) {\n      const [_, project, spec, lineNum, testName] = match;\n      if (!result[project]) {\n        result[project] = {};\n      }\n      if (!result[project][spec]) {\n        result[project][spec] = [];\n      }\n\n      result[project][spec].push(testName);\n    }\n  }\n\n  return result;\n};\n","import { parse } from \"./parser\";\n\nexport function parseTestSuite(input: string, playwrightVersion?: string) {\n  return parse(input);\n}\n\nexport { type TestSuite } from \"./parser\";\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,IAAA,eAAAC,EAAAH,GCIO,IAAMI,EAASC,GAAmC,CACvD,IAAMC,EAAQD,EAAY,MAAM;AAAA,CAAI,EAC9BE,EAAoB,CAAC,EAE3B,QAAWC,KAAQF,EAAO,CACxB,IAAMG,EAAQD,EAAK,MAAM,yCAAyC,EAClE,GAAIC,EAAO,CACT,GAAM,CAACC,EAAGC,EAASC,EAAMC,EAASC,CAAQ,EAAIL,EACzCF,EAAOI,CAAO,IACjBJ,EAAOI,CAAO,EAAI,CAAC,GAEhBJ,EAAOI,CAAO,EAAEC,CAAI,IACvBL,EAAOI,CAAO,EAAEC,CAAI,EAAI,CAAC,GAG3BL,EAAOI,CAAO,EAAEC,CAAI,EAAE,KAAKE,CAAQ,GAIvC,OAAOP,CACT,ECtBO,SAASQ,EAAeC,EAAeC,EAA4B,CACxE,OAAOC,EAAMF,CAAK,CACpB,CFHA,IAAAG,EAAkB,oBAEZC,KAAQ,EAAAC,SAAM,aAAa,EAEpBC,EAAa,MAAO,QAK3B,CAGJ,GAAM,CAAE,KAAM,EAAK,MAAM,KAAK,iBAAiB,EAIzC,UAAY,CAChB,OACA,SACA,GAAG,OAAO,QAAQ,MAAM,EACrB,OAAO,CAAC,CAACC,EAAGC,CAAK,IAAMA,IAAU,MAAS,EAC1C,IAAI,CAAC,CAACC,EAAKD,CAAK,IAAM,GAAGE,EAAWD,CAAG,KAAKD,GAAO,EACtD,kBACA,aACF,EAEAJ,EAAM,mDAAoD,SAAS,EAEnE,IAAM,YAAc,MAAM,MAAM,aAAc,UAAW,CACvD,IAAK,CACH,aAAc,MAChB,CACF,CAAC,EAID,OAFAA,EAAM,mBAAoB,WAAW,EAEjC,YAAY,OACP,CAAE,YAAa,OAAQ,IAAK,EAG9B,CAAE,YAAa,OAAQO,EAAe,YAAY,MAAM,CAAE,CACnE,EAEMD,EAAcE,GAAkB,CACpC,OAAQA,EAAO,CACb,IAAK,UACH,MAAO,YACT,IAAK,OACH,MAAO,SACT,IAAK,aACH,MAAO,gBACT,IAAK,SACH,MAAO,WACT,QACE,MAAM,IAAI,MAAM,eAAe,CACnC,CACF","names":["src_exports","__export","pwcScanner","__toCommonJS","parse","inputString","lines","result","line","match","_","project","spec","lineNum","testName","parseTestSuite","input","playwrightVersion","parse","import_debug","debug","Debug","pwcScanner","_","value","key","toCliParam","parseTestSuite","param"]}